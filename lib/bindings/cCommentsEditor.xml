<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- Comments generic panel -->

	<binding id="cCommentsPanel" extends="layout.cDocumentEditor#cDocumentEditorPanel">
		<resources>
			<stylesheet src="modules.comment.cCommentsPanel" />
		</resources>
		<content>
			<xul:vbox flex="1">
				<xul:cmessageinfo anonid="message" />
				<xul:hbox class="change-toolbox" anonid="paginator-container">
					<xul:spacer flex="1" />
					<xul:cpaginator anonid="paginator" hideseparator="true" />
					<xul:spacer flex="1" />
				</xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:vbox anonid="comments" />
					<xul:spacer flex="1" />
				</xul:scrollbox>
			</xul:vbox>
		</content>
		<implementation>
			<property name="panelWidth" readonly="true">
				<getter><![CDATA[
					return this.boxObject.width;
				]]></getter>
			</property>

			<method name="getInitializeParameters">
				<body><![CDATA[
					return {
						modulename: 'comment',
						action: 'LoadCommentsForDocument', 
						cmpref: this.documentEditor.documentid, 
						lang: Context.W_LANG,
						startIndex: this.mStartIndex,
						pageSize: this.mPageSize
					};
				]]></body>
			</method>

			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[
					if (result.status != "OK")
					{
						this.showErrorMessage(result.contents.errorMessage);
						this.collapseContentZone(true);
						this.mInitialized = true;
						return;
					}						
					this.collapseContentZone(false);
					this.mInitialized = true;
					
					var contents = result.contents;					
					var comments = contents.comments;
					var commentsNode = document.getAnonymousElementByAttribute(this, "anonid", 'comments');
					var textStyle = 'style="width:'+(this.panelWidth - 350)+'px"';
					for (var i = 0; i < comments.length; i++)
					{
						var comment = comments[i];
						var doc = new DOMParser().parseFromString('<div xmlns="http://www.w3.org/1999/xhtml" ' + textStyle + '>' + comment['contents'] + '</div>', 'text/xml');
						
						var section = commentsNode.childNodes[i];
						if (section == null)
						{
							section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
							section.className = 'comment';
							section.panel = this;
							commentsNode.appendChild(section);
							section.appendChild(doc.documentElement);
						}
						else
						{
							section.removeAttribute('collapsed');
							section.replaceChild(doc.documentElement, section.firstChild);
						}
						
						for (var name in comment)
						{
							section.setAttribute(name, comment[name]);
							if (comment[name] && comment[name] != '')
							{
								section.removeAttribute(name+'hidden');
							}
							else
							{
								section.setAttribute(name+'hidden', true);
							}
						}
						section.tasks = comment['tasks'];
						
						section.setAttribute('canDeactivate', true);
						section.setAttribute('canReactivate', true);
						if (comment['canValidate'])
						{
							section.removeAttribute('canDelete');
							switch (comment['status'])
							{
								case 'PUBLICATED' :
									section.removeAttribute('canDeactivate');
									break;
									
								case 'DEACTIVATED' :
									section.removeAttribute('canReactivate');
									break;
							}
						}
						else
						{
							section.setAttribute('canDelete', true);
						}
						wCore.executeOnMethodExists(section, 'initializeTasks', function(sec) { sec.initializeTasks(); });
					}
					while ((section = commentsNode.childNodes[i]) != null)
					{
						section.setAttribute('collapsed', 'true');
						i++;
					}
					
					this.mStartIndex = contents.startIndex;
					this.mDocumentTotal = contents.total;
					this.mRowCount = contents.comments.length;
					this.getElementByAnonId('paginator').updateNavigation(this);

					this.gotoTop();
				]]></body>
			</method>

			<method name="clear">
				<body><![CDATA[	
					this.collapseContentZone(true);
					this.showTextMessage('');
					this.mInitialized = false;				
				]]></body>
			</method>

			<method name="refresh">
				<body><![CDATA[
					this.documentEditor.executeServerAction('comments', 'Initialize');
				]]></body>
			</method>

			<field name="mPageSize">10</field>
			<field name="mStartIndex">0</field>
			<field name="mDocumentTotal">0</field>
			<field name="mRowCount">0</field>
			
			<method name="navigate">
				<parameter name="startIndex" />
				<body><![CDATA[
					this.mStartIndex = startIndex;
					var me = this;
					wCore.executeJSON('comment', 'LoadCommentsForDocument', this.getInitializeParameters(), function (result) { me.fireInitializeComplete(result); }, true);
				]]></body>
			</method>
		</implementation>
	</binding>

	<binding id="cCommentInfos">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
		</resources>
		<implementation>
			<method name="viewAuthorWebsite">
				<body><![CDATA[
					window.open(this.getAttribute('authorwebsiteurl'), null, "menubar=yes, location=yes, toolbar=yes, resizable=yes, scrollbars=yes, status=yes");
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:groupbox flex="1">
				<xul:caption>
					<xul:label xbl:inherits="value=creationdate" />
					-
					<xul:label xbl:inherits="value=authorName" />
					<xul:toolbarbutton xbl:inherits="disabled=canDelete" anonid="delete" image="{IconsBase}/small/delete.png" tooltiptext="${transui:m.uixul.bo.actions.Delete,ucf,attr}" />
				</xul:caption>
				<xul:hbox>
					<xul:grid width="300">
						<xul:columns>
							<xul:column />
							<xul:column flex="1" />
							<xul:column />
						</xul:columns>
						<xul:rows>
							<xul:row>
								<xul:label value="${transui:m.comment.bo.doceditor.panel.comments.Date,ucf,attr}" />
								<xul:label xbl:inherits="value=creationdate" />
							</xul:row>
							<xul:row align="center">
								<xul:label value="${transui:m.comment.bo.doceditor.panel.comments.Status,ucf,attr}" />
								<xul:label xbl:inherits="value=statusLabel" />
								<xul:hbox>
									<xul:toolbarbutton xbl:inherits="hidden=canDeactivate" anonid="deactivate" image="{IconsBase}/small/deactivated.png" tooltiptext="${transui:m.uixul.bo.actions.Deactivate,ucf,attr}" />
									<xul:toolbarbutton xbl:inherits="hidden=canReactivate" anonid="reactivate" image="{IconsBase}/small/reactivate.png" tooltiptext="${transui:m.uixul.bo.actions.ReActivate,ucf,attr}" />
									<xul:hbox anonid="tasks" />
								</xul:hbox>
							</xul:row>
							<xul:row>
								<xul:label value="${transui:m.comment.bo.doceditor.panel.comments.Author-name,ucf,attr}" />
								<xul:label xbl:inherits="xbl:text=authorName,tooltiptext=authorName" crop="end" class="allow-text-selection" />
							</xul:row>
							<xul:row>
								<xul:label value="${transui:m.comment.bo.doceditor.panel.comments.Author-email,ucf,attr}" />
								<xul:label xbl:inherits="xbl:text=email,tooltiptext=email" crop="end" class="allow-text-selection" />
							</xul:row>
							<xul:row xbl:inherits="hidden=authorwebsiteurlhidden" align="center">
								<xul:label value="${transui:m.comment.bo.doceditor.panel.comments.Author-website,ucf,attr}" />
								<xul:label xbl:inherits="value=authorwebsiteurl,tooltiptext=authorwebsiteurl" crop="end" />
								<xul:toolbarbutton tooltiptext="${transui:m.comment.document.comment.View-website,ucf,attr}" image="{IconsBase}/small/preview.png" oncommand="viewAuthorWebsite()" />
							</xul:row>
							<xul:row>
								<xul:label value="${transui:m.comment.bo.doceditor.panel.comments.Rating,ucf,attr}" />
								<xul:label xbl:inherits="xbl:text=rating" class="allow-text-selection" />
							</xul:row>
							<xul:row>
								<xul:label value="${transui:m.comment.bo.doceditor.panel.comments.Relevancy,ucf,attr}" />
								<xul:label xbl:inherits="xbl:text=relevancy" class="allow-text-selection" />
							</xul:row>
							<xul:row xbl:inherits="hidden=linkedwebsitehidden">
								<xul:label value="${transui:m.comment.bo.doceditor.panel.comments.linked-website,ucf,attr}" />
								<xul:label xbl:inherits="xbl:text=linkedwebsite" class="allow-text-selection" />
							</xul:row>
						</xul:rows>
					</xul:grid>
					<xul:hbox flex="1" anonid="text" class="allow-text-selection">
						<xbl:children />
					</xul:hbox>
				</xul:hbox>
			</xul:groupbox>
		</content>
		<implementation>
			<constructor><![CDATA[
					var _this = this;
					
					var node = document.getAnonymousElementByAttribute(this, 'anonid', 'delete');
					node.addEventListener('command', function () { _this.delete(); }, true);
					
					var node = document.getAnonymousElementByAttribute(this, 'anonid', 'deactivate');
					node.addEventListener('command', function () { _this.deactivate(); }, true);
					
					var node = document.getAnonymousElementByAttribute(this, 'anonid', 'reactivate');
					node.addEventListener('command', function () { _this.reactivate(); }, true);
			]]></constructor>

			<field name="panel">null</field>
			<field name="tasks">null</field>

			<method name="initializeTasks">
				<body><![CDATA[
					var _this = this;
					var node = document.getAnonymousElementByAttribute(this, 'anonid', 'tasks');					
					var tasks = this.tasks;
					var button;
					for (var i = 0; i < tasks.length; i++)
					{
						button = node.childNodes[i];
						if (button == null)
						{
							button = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'toolbarbutton');
							button.setAttribute('image', "{IconsBase}/small/task.png");
							button.addEventListener('command', function (event) { _this.runtask(event); }, true);
							node.appendChild(button);							
						}
						else
						{
							button.removeAttribute('collapsed');
						}
						
						var task = tasks[i];
						button.setAttribute('taskId', task[0]);
						button.setAttribute('tooltiptext', task[1]);
						button.setAttribute('taskDialog', task[2]);
					}
					while ((button = node.childNodes[i]) != null)
					{
						button.setAttribute('collapsed', 'true');
						i++;
					}
				]]></body>
			</method>

			<method name="runtask">
				<parameter name="event" />
				<body><![CDATA[
					var taskId = event.currentTarget.getAttribute('taskId');
					var taskDialog = event.currentTarget.getAttribute('taskDialog');
					this.getController().openModalDialog(this.panel, taskDialog, {taskId: taskId});
				]]></body>
			</method>

			<method name="delete">
				<body><![CDATA[
					if (confirm("${transui:m.comment.bo.doceditor.actions.Confirm-delete-comment,ucf,js}"))
					{
						this.executeAction("DeleteJSON", "${transui:m.comment.bo.doceditor.actions.Success-deleting-comment,ucf,js}");
					}
				]]></body>
			</method>

			<method name="deactivate">
				<body><![CDATA[
					this.executeAction("DeactivatedJSON", "${transui:m.comment.bo.doceditor.actions.Success-deactivating-comment,ucf,js}");
				]]></body>
			</method>

			<method name="reactivate">
				<body><![CDATA[
					this.executeAction("ReActivateJSON", "${transui:m.comment.bo.doceditor.actions.Success-reactivating-comment,ucf,js}");
				]]></body>
			</method>

			<method name="executeAction">
				<parameter name="action" />
				<parameter name="successMessage" />
				<body><![CDATA[
					var result = wCore.executeJSON("comment", action, {cmpref: this.getAttribute('commentId'), lang: Context.W_LANG}, null, true);
					if (result.status != 'OK')
					{	
						this.panel.showErrorMessage(result.contents.errorMessage);
					}
					else
					{
						this.panel.showTextMessage(successMessage);
						this.panel.refresh();
					}
				]]></body>
			</method>

			<method name="getController">
				<body><![CDATA[
					return document.getElementsByTagName('wcontroller')[0];
				]]></body>
			</method>
		</implementation>
	</binding>
</bindings>